<script>
  import { T, useFrame } from '@threlte/core';
  import { useTexture, OrbitControls } from '@threlte/extras';

  const firstText = useTexture('/flexible.png');
  const secondText = useTexture('/bg-text.png');
  let shaderMaterialRef;

  useFrame((_, delta) => {
    if (shaderMaterialRef) {
      shaderMaterialRef.uniforms.uTime.value += delta;
    }
  })
</script>

<T.PerspectiveCamera makeDefault position={[0, 0, 4]} >
  <OrbitControls />
</T.PerspectiveCamera>

<T.Mesh position={[0, 0, -4]} scale={2}>
  <T.PlaneGeometry
    args={[5,5]}
    />
  <T.MeshBasicMaterial
    color={'#fff'} 
    />
</T.Mesh>

{#await secondText then value}
  <T.Mesh position={[0, 0, -2]} >
    <T.PlaneGeometry
      args={[5,5]}
      />
    <T.ShaderMaterial
      bind:ref={shaderMaterialRef}
      transparent
      uniforms={{
        uTexture: { value: value },
        uTime: { value: 0.0 }
      }}
      vertexShader={`
        varying vec2 vUv;
        void main() {
          vUv = uv;
          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
        }
      `}
      fragmentShader={`
        varying vec2 vUv;
        uniform sampler2D uTexture;
        uniform float uTime;
        void main() {
          // Repeat the texture 9 times vertically
          vec2 newUv = vUv * vec2(1.0, 9.0);
          
          // Horizontal Skew
          newUv.x += vUv.y * 0.2;
          
          // Wrap UV coordinates to simulate infinite repeating
          // newUv = fract(newUv + vec2(uTime * 0.2, 0.0));
          newUv = fract(newUv);
          
          vec4 text = texture2D(uTexture, newUv);
          text.w *= 4.0;

          gl_FragColor = text;
        }
      `}
    />
  </T.Mesh>
{/await}

{#await firstText then value}
  <T.Mesh scale={0}>
    <T.PlaneGeometry 
      args={[5,5]}
      />
    <T.ShaderMaterial
      transparent
      uniforms={
          {
            uTexture: { value: value },
          }
        }
      vertexShader={`
        varying vec2 vUv;
        void main() {
          vUv = uv;
          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
        }
      `}
      fragmentShader={`
        varying vec2 vUv;
        uniform sampler2D uTexture;
        void main() {
          vec2 newUv = vUv;
          vec4 text = texture2D(uTexture, newUv); 
          float darkeningFactor = 4.0;
          text.w *= darkeningFactor;
          gl_FragColor = text;
        }
      `}
      />

  </T.Mesh>
{/await}
